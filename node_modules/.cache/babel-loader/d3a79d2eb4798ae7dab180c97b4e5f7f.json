{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaleel\\\\Desktop\\\\React\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm(props) {\n  _s();\n\n  /* Always use the UseState hook inside the  main function not in\r\n        the nested function */\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  function titleChangeHandler(event) {\n    /* \r\n        1-event is the object which is automatically given by\r\n          js when change happends and listening happens event is an object which has the \r\n          value which is listened when user type anythin\r\n        2- Now we need something to store this listened value so that\r\n            we can use it later on when we submit the form\r\n        3-   So simply we use state and for that we destructure the import*/\n    // console.log(event.target.value);\n    setEnteredTitle(event.target.value);\n  }\n  /* another way of defining a function */\n\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n  }\n\n  function submitHandler(event) {\n    /*  we are preventing the object to use the default behaviour because in \r\n            browsers onsubmit has the default behaviour to reload the page and we dont want that\r\n             */\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }; // console.log(expenseData);\n\n    /* here we are  */\n\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  }\n\n  let formS = false;\n\n  if (formS) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: showForm,\n        children: \"Add New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n\n    function showForm() {\n      formS = true; // return (\n\n      /*#__PURE__*/\n      _jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: enteredTitle,\n              onChange: titleChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: enteredAmount,\n              min: \"0.01\",\n              step: \"0.01\",\n              onChange: amountChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: enteredDate,\n              min: \"2019-01-01\",\n              max: \"20211-12-31\",\n              onChange: dateChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this); // );\n\n    }\n  }\n}\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/jaleel/Desktop/React/01-starting-setup/src/Components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","formS","showForm"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\nfunction ExpenseForm(props) {\r\n  /* Always use the UseState hook inside the  main function not in\r\n        the nested function */\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  function titleChangeHandler(event) {\r\n    /* \r\n        1-event is the object which is automatically given by\r\n          js when change happends and listening happens event is an object which has the \r\n          value which is listened when user type anythin\r\n        2- Now we need something to store this listened value so that\r\n            we can use it later on when we submit the form\r\n        3-   So simply we use state and for that we destructure the import*/\r\n\r\n    // console.log(event.target.value);\r\n    setEnteredTitle(event.target.value);\r\n  }\r\n  /* another way of defining a function */\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  function dateChangeHandler(event) {\r\n    setEnteredDate(event.target.value);\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    /*  we are preventing the object to use the default behaviour because in \r\n            browsers onsubmit has the default behaviour to reload the page and we dont want that\r\n             */\r\n    event.preventDefault();\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    // console.log(expenseData);\r\n    /* here we are  */\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  }\r\n  let formS = false;\r\n  if (formS) {\r\n    return (\r\n      <div className=\"new-expense__actions\">\r\n        <button onclick={showForm}>Add New Expense</button>\r\n      </div>\r\n    );\r\n    function showForm() {\r\n      formS = true;\r\n      // return (\r\n      <form onSubmit={submitHandler}>\r\n        <div className=\"new-expense__control\">\r\n          <div className=\"new-expense__control\">\r\n            <label>Title</label>\r\n            {/* we are using two way binding here */}\r\n            <input\r\n              type=\"text\"\r\n              value={enteredTitle}\r\n              onChange={titleChangeHandler}\r\n            />\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Amount</label>\r\n            <input\r\n              type=\"number\"\r\n              value={enteredAmount}\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              onChange={amountChangeHandler}\r\n            />\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Date</label>\r\n            <input\r\n              type=\"date\"\r\n              value={enteredDate}\r\n              min=\"2019-01-01\"\r\n              max=\"20211-12-31\"\r\n              onChange={dateChangeHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n          <button>Cancel</button>\r\n        </div>\r\n      </form>;\r\n      // );\r\n    }\r\n  }\r\n}\r\nexport default ExpenseForm;\r\n"]},"metadata":{},"sourceType":"module"}