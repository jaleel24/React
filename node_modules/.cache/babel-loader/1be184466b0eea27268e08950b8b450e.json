{"ast":null,"code":"import _slicedToArray from\"C:/Users/jaleel/Desktop/React/01-starting-setup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";//import ExpenseForm from \"../NewExpense/ExpenseForm\";\nimport Card from\"../UI/Card\";import\"./ExpenseDate.css\";import ExpensesFilter from\"./ExpensesFilter\";import ExpensesList from\"./ExpensesList\";import ExpensesChart from\"./Expenseschart\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Expenses(props){var _useState=useState(\"2020\"),_useState2=_slicedToArray(_useState,2),filteredYear=_useState2[0],setFileredYEar=_useState2[1];/* selectedYear is the value = event.target.value in the ExpensesFilter.js */function onChangeFilterHandler(selectedYear){/* now as we are changing the state so we need to import\r\n       the state from react and  we dont need to log the value as we were\r\n       console.log('Expenses.js')\r\n       console.log(selectedYear); */setFileredYEar(selectedYear);};/* boolean function called (expense =>...) */var filteredExpense=props.items.filter(function(expense){return expense.date.getFullYear().toString()===filteredYear;});return/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(Card,{className:\"expenses\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Filter by year\"}),/*#__PURE__*/_jsx(ExpensesFilter,{selected:filteredYear,onChangeFilter:onChangeFilterHandler}),/*#__PURE__*/_jsx(ExpensesChart,{expense:filteredExpense}),/*#__PURE__*/_jsx(ExpensesList,{items:filteredExpense})]})});//    {/* {props.items.map((expense) */}\n//    {/*\n//    1- now in order to use conditional ternary statment to list the expense according to\n//       the choice \n//    2- We can use the && operator as well instead of the  long ternary operator\n//       as used in the code \n//       {filteredExpense.length === 0 && <p>No Expenses found.</p> } and similar for the other part\n//       in React.js && operator is a trick which basicaly reutrn the value if the conditional\n//       part is correct\n//     3- or else we can simply store the <p> value in the variable and then use if and else statments*/\n//   {/* {filteredExpense.length === 0 ?:filteredExpense.map((expense) => (\n//     <ExpenseItem\n//       key={expense.id}\n//       title={expense.title}\n//       amount={expense.amount}\n//       date={expense.date}\n//     />\n//   ))} */}\n//   /* <ExpenseItem\n//   title={props.items[0].title}\n//   amount={props.items[0].amount}\n//   date={props.items[0].date}\n// ></ExpenseItem>\n// <ExpenseItem\n//   title={props.items[1].title}\n//   amount={props.items[1].amount}\n//   date={props.items[1].date}\n// ></ExpenseItem>\n// <ExpenseItem\n//   title={props.items[2].title}\n//   amount={props.items[2].amount}\n//   date={props.items[2].date}\n// ></ExpenseItem>\n// <ExpenseItem\n//   title={props.items[3].title}\n//   amount={props.items[3].amount}\n//   date={props.items[3].date}\n// ></ExpenseItem> */}\n}export default Expenses;","map":{"version":3,"sources":["C:/Users/jaleel/Desktop/React/01-starting-setup/src/Components/Expenses/Expenses.js"],"names":["React","useState","Card","ExpensesFilter","ExpensesList","ExpensesChart","Expenses","props","filteredYear","setFileredYEar","onChangeFilterHandler","selectedYear","filteredExpense","items","filter","expense","date","getFullYear","toString"],"mappings":"sKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAO,mBAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,C,wFACA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACvB,cAAuCN,QAAQ,CAAC,MAAD,CAA/C,wCAAOO,YAAP,eAAqBC,cAArB,eACA,6EACA,QAASC,CAAAA,qBAAT,CAA+BC,YAA/B,CAA6C,CAC3C;AACJ;AACA;AACA,oCACIF,cAAc,CAACE,YAAD,CAAd,CACD,EACD,6CACA,GAAMC,CAAAA,eAAe,CAAEL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmB,SAAAC,OAAO,CAAG,CAClD,MAAOA,CAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,KAA0CV,YAAjD,CACD,CAFsB,CAAvB,CAIA,mBACE,iCACE,MAAC,IAAD,EAAM,SAAS,CAAC,UAAhB,wBACE,sCADF,cAEE,KAAC,cAAD,EACE,QAAQ,CAAEA,YADZ,CAEE,cAAc,CAAEE,qBAFlB,EAFF,cAME,KAAC,aAAD,EAAe,OAAO,CAAEE,eAAxB,EANF,cAOE,KAAC,YAAD,EAAc,KAAK,CAAEA,eAArB,EAPF,GADF,EADF,CAaI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEL,CACD,cAAeN,CAAAA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n//import ExpenseForm from \"../NewExpense/ExpenseForm\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./ExpenseDate.css\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./Expenseschart\";\r\nfunction Expenses(props) {\r\n  const [filteredYear, setFileredYEar] = useState(\"2020\");\r\n  /* selectedYear is the value = event.target.value in the ExpensesFilter.js */\r\n  function onChangeFilterHandler(selectedYear) {\r\n    /* now as we are changing the state so we need to import\r\n       the state from react and  we dont need to log the value as we were\r\n       console.log('Expenses.js')\r\n       console.log(selectedYear); */\r\n    setFileredYEar(selectedYear);\r\n  };\r\n  /* boolean function called (expense =>...) */\r\n  const filteredExpense= props.items.filter(expense =>{\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n    \r\n  return (\r\n    <li>\r\n      <Card className=\"expenses\">\r\n        <h2>Filter by year</h2>\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={onChangeFilterHandler}\r\n        />\r\n        <ExpensesChart expense={filteredExpense}/>\r\n        <ExpensesList items={filteredExpense}/>\r\n        </Card>\r\n    </li>\r\n  );\r\n      //    {/* {props.items.map((expense) */}\r\n      //    {/*\r\n      //    1- now in order to use conditional ternary statment to list the expense according to\r\n      //       the choice \r\n      //    2- We can use the && operator as well instead of the  long ternary operator\r\n      //       as used in the code \r\n      //       {filteredExpense.length === 0 && <p>No Expenses found.</p> } and similar for the other part\r\n      //       in React.js && operator is a trick which basicaly reutrn the value if the conditional\r\n      //       part is correct\r\n      //     3- or else we can simply store the <p> value in the variable and then use if and else statments*/\r\n  \r\n         \r\n      //   {/* {filteredExpense.length === 0 ?:filteredExpense.map((expense) => (\r\n      //     <ExpenseItem\r\n      //       key={expense.id}\r\n      //       title={expense.title}\r\n      //       amount={expense.amount}\r\n      //       date={expense.date}\r\n      //     />\r\n      //   ))} */}\r\n       \r\n      //   /* <ExpenseItem\r\n      //   title={props.items[0].title}\r\n      //   amount={props.items[0].amount}\r\n      //   date={props.items[0].date}\r\n      // ></ExpenseItem>\r\n      // <ExpenseItem\r\n      //   title={props.items[1].title}\r\n      //   amount={props.items[1].amount}\r\n      //   date={props.items[1].date}\r\n      // ></ExpenseItem>\r\n      // <ExpenseItem\r\n      //   title={props.items[2].title}\r\n      //   amount={props.items[2].amount}\r\n      //   date={props.items[2].date}\r\n      // ></ExpenseItem>\r\n      // <ExpenseItem\r\n      //   title={props.items[3].title}\r\n      //   amount={props.items[3].amount}\r\n      //   date={props.items[3].date}\r\n      // ></ExpenseItem> */}\r\n   \r\n}\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}